---
import type { ImageMetadata } from "astro";
import { Image } from "astro:assets";
import { getProjectById } from "../utils/projectData";
const { projectId } = Astro.props;
const project = getProjectById(projectId);

if (project === undefined) {
    throw new Error(`A project for id:${projectId} was not found.`);
}
// TODO: need to add vimeo hash parameter
const videoSrc = () =>
    project?.video + "?title=0&byline=0&portrait=0";

const images = import.meta.glob<{ default: ImageMetadata }>(
    "../../static/images/projects/*",
);

const projectPhotoDir = "../../static/images/projects/";
const jpgSuffix = "@0,5x.jpg";

const projectImages = [];
for (const photoName of project?.photos) {
    const fileName = `${projectPhotoDir}${photoName}${jpgSuffix}`;
    projectImages.push(images[fileName]());
}
---

<div class="project">
    <h3>{project.title}</h3>
    <div class="project-top-container">
        <div class="description">
            <!-- <h4 class="top">Summary:</h4> -->
            <p>{project.description}</p>
        </div>
        <div class="role">
            <h4 class="top">Role:</h4>
            <p class="small-bottom-padding">{project.role}</p>
            <div class="tools">
                <h4>Tools:</h4>
                <p>{project.tools.join(", ")}</p>
            </div>
        </div>
    </div>
    {
        project.video !== "" ? (
            <div v-if="project.video != ''" class="video-container">
                <div class="video-container-inner">
                    <iframe src={videoSrc()} frameborder="0" allowfullscreen />
                </div>
            </div>
        ) : (
            <div />
        )
    }
    <div class="photo-grid">
        {
            projectImages.map((imageSrc, i) => (
                <div class="photo-container">
                    <Image src={imageSrc} alt={`photo-${i}`} />
                </div>
            ))
        }
    </div>
</div>

<style>
    .project-top-container {
        display: flex;
    }

    .description,
    .role {
        flex: 1 1 50%;
        padding-right: 120px;
    }

    .description p {
        font-size: 1.3rem;
    }

    .project-top-container div:last-of-type {
        padding-right: 0;
    }

    .slide-container,
    .photo-grid {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-around;
    }

    .photo-container {
        width: calc(50% - 8px);
        margin-bottom: 8px;
        line-height: 0;
    }

    .slide-container img,
    .photo-container img {
        width: 100%;
        height: auto;
    }

    h3 {
        text-align: left;
    }

    .role h4,
    .role h5,
    .description h4 {
        text-align: left;
    }

    .top {
        padding-top: 0;
    }

    .role .bolder,
    .role h5 {
        font-size: 1.2rem;
    }

    .small-bottom-padding {
        padding-bottom: 1rem;
    }

    .video-container {
        position: relative;
        max-width: 854px;
        margin: 0 auto;
    }

    .video-container-inner {
        position: relative;
        padding-bottom: 56.25%;
        height: 0;
        overflow: hidden;
        width: 100%;
        height: auto;
    }

    .video-container-inner iframe,
    .video-container-inner object,
    .video-container-inner embed {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }

    @media only screen and (max-width: 768px) {
        /* For mobile phones: */

        .project-top-container {
            display: block;
        }

        .description,
        .role {
            flex: 1 1 100%;
            padding-right: 0;
            padding-bottom: 1rem;
        }

        .video-container {
            padding-bottom: 1rem;
        }

        .photo-container {
            width: 100%;
        }
    }
</style>
